@article{Hinze-Paterson:FingerTree,
	title = "Finger Trees: A Simple General-purpose Data Structure",
	author = "Ralf Hinze and Ross Paterson",
	journal = "Journal of Functional Programming",
	volume = 16,
	number = 2,
	pages = "197-217",
	year = 2006
}

@misc{ wiki:SegmentTree,
   author = "{Wikipedia contributors}",
   title = "Segment tree --- {W}ikipedia{,} The Free Encyclopedia",
   year = "2023",
   url = "https://en.wikipedia.org/wiki/Segment_tree",
   note = "[Online; accessed 20-Dec-2023]"
}

@article{rissanen1979arithmetic,
  title={Arithmetic coding},
  author={Rissanen, Jorma and Langdon, Glen G},
  journal={IBM Journal of research and development},
  volume={23},
  number={2},
  pages={149--162},
  year={1979},
  publisher={IBM}
}

@incollection{bird2002arithmetic,
  title={Arithmetic coding with folds and unfolds},
  author={Bird, Richard and Gibbons, Jeremy},
  booktitle={International School on Advanced Functional Programming},
  pages={1--26},
  year={2002},
  publisher={Springer}
}

@article{fenwick1994new,
  title={A new data structure for cumulative frequency tables},
  author={Fenwick, Peter M},
  journal={Software: Practice and experience},
  volume={24},
  number={3},
  pages={327--336},
  year={1994},
  publisher={Wiley Online Library}
}

@inproceedings{ryabko1989fast,
  title={A fast on-line code},
  author={Ryabko, Boris Yakovlevich},
  booktitle={Doklady Akademii Nauk},
  volume={306},
  number={3},
  pages={548--552},
  year={1989},
  organization={Russian Academy of Sciences}
}

@book{CP4,
  title={Competitive Programming 4: The Lower Bound of Programming Contests in the 2020s},
  author={Halim, S. and Halim, F. and Effendy, S.},
  isbn={9781716745522},
  url={https://cpbook.net/},
  year={2020},
  publisher={Lulu Press}
}

@inproceedings{pickering2016pattern,
author = {Pickering, Matthew and \'{E}rdi, Gerg\H{o} and Peyton Jones, Simon and Eisenberg, Richard A.},
title = {Pattern synonyms},
year = {2016},
isbn = {9781450344340},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2976002.2976013},
doi = {10.1145/2976002.2976013},
abstract = {Pattern matching has proven to be a convenient, expressive way of inspecting data. Yet this language feature, in its traditional form, is limited: patterns must be data constructors of concrete data types. No computation or abstraction is allowed. The data type in question must be concrete, with no ability to enforce any invariants. Any change in this data type requires all clients to update their code.  This paper introduces pattern synonyms, which allow programmers to abstract over patterns, painting over all the shortcomings listed above. Pattern synonyms are assigned types, enabling a compiler to check the validity of a synonym independent of its definition. These types are intricate; detailing how to assign a type to a pattern synonym is a key contribution of this work. We have implemented pattern synonyms in the Glasgow Haskell Compiler, where they have enjoyed immediate popularity, but we believe this feature could easily be exported to other languages that support pattern matching.},
booktitle = {Proceedings of the 9th International Symposium on Haskell},
pages = {80â€“91},
numpages = {12},
keywords = {Haskell, functional programming, pattern matching},
location = {Nara, Japan},
series = {Haskell 2016}
}

@article{erwig2001pattern,
  title={Pattern guards and transformational patterns},
  author={Erwig, Martin and Jones, Simon Peyton},
  journal={Electronic Notes in Theoretical Computer Science},
  volume={41},
  number={1},
  pages={3},
  year={2001},
  publisher={Elsevier}
}

@inproceedings{claessen2000quickcheck,
  title={QuickCheck: a lightweight tool for random testing of Haskell programs},
  author={Claessen, Koen and Hughes, John},
  booktitle={Proceedings of the fifth ACM SIGPLAN international conference on Functional programming},
  pages={268--279},
  year={2000}
}
